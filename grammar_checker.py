# -*- coding: utf-8 -*-
"""grammar-checker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V-_FD6eoshaBM-aF8M4ittIy13969Vy-
"""

def correct_grammar(pos_tags):
    words, tags = zip(*pos_tags)
    words = list(words)  # Convert tuple to list for modifications
    errors = []

    # Rule 1: Subject-Object-Verb (SOV) Order
    if "PRON" in tags and "NOUN" in tags and "VERB" in tags:
        pron_index = tags.index("PRON")
        noun_index = tags.index("NOUN")
        verb_index = tags.index("VERB")
        if not (pron_index < noun_index < verb_index):
            errors.append("Error: Subject-Object-Verb (SOV) order is incorrect.")
            reordered_words = [words[pron_index], words[noun_index], words[verb_index]]
            remaining_words = [w for i, w in enumerate(words) if i not in (pron_index, noun_index, verb_index)]
            words = reordered_words + remaining_words

    # Rule 2: Adjective-Noun Order
    if "ADJ" in tags and "NOUN" in tags:
        for i, tag in enumerate(tags):
            if tag == "ADJ":
                adj_index = i
                for j in range(adj_index + 1, len(tags)):
                    if tags[j] == "NOUN" and adj_index > j:
                        errors.append("Error: Adjective should precede the noun.")
                        words[adj_index], words[j] = words[j], words[adj_index]

    # Rule 3: Plural Agreement
    if "PRON" in tags and "VERB" in tags:
        pron_index = tags.index("PRON")
        verb_index = tags.index("VERB")
        pron_word = words[pron_index]
        verb_word = words[verb_index]
        if pron_word.endswith("ள்") and not verb_word.endswith("ோம்"):
            errors.append("Error: Plural pronoun does not match plural verb.")
            if "ேன்" in verb_word:
                words[verb_index] = verb_word.replace("ேன்", "ோம்")
            else:
                words[verb_index] += "ோம்"

    corrected_sentence = " ".join(words)
    return corrected_sentence, errors

def process_tamil_text_with_correction(pipeline, tamil_text):
    doc = pipeline(tamil_text)
    pos_tags = [(word.text, word.upos) for sent in doc.sentences for word in sent.words]
    corrected_text, errors = correct_grammar(pos_tags)
    return corrected_text, errors